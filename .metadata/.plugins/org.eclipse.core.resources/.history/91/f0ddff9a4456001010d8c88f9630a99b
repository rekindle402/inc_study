package com.sinse.boardapp.pool;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;

// 커넥션 풀 만들기
public class PoolManager {

	private String driver = "com.mysql.cj.jdbc.Driver";
	private String url = "jdbc:mysql://localhost:3306/spring4";
	private String user = "spring4";
	private String pass = "1234";

	// 생성자는 막았지만, 메서드를 통해서 인스턴스를 가져갈 수 있음.
	private static PoolManager instance;

	// Connection 들을 모아서 관리할 벡터(순서가 있는 List)
	Vector<Connection> connectionPool = new Vector<>();

	private PoolManager() {

	}

	//싱글턴 패턴
	public static PoolManager getInstance() {
		if (instance == null) {
			instance = new PoolManager();
		}

		return instance;
	}

	// 커넥션 담아두기
	private void createConnection() {
		for(int i=0; i<20; i++) {
		try {
			Class.forName(driver);
			Connection con = DriverManager.getConnection(url, user, pass);
			//벡터에 모아놓기! 즉 풀을 만든다!
			
			connectionPool.add(con);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		}
	}
	// 빌려주기
	// 동시에 접속시 if문에 걸리지 않아서 null이 반환될 수 있으므로, 동기화(순서를 지키게) 시키자
	public synchronized Connection getConnection() {
		// 빌려줄 것이 없으면, 또 만든다!
		if(connectionPool.isEmpty()) { // 요소가 소진되었다면
			createConnection();
		}
		
		return connectionPool.remove(0); // 반환과 동시에, 기존 벡터 요소 하나 제거
	}
	
	public void release(Connection con) {
		if(con != null) {
			connectionPool.add(con); // 다시 벡터에 추가
		}
	}
}
