/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.93
 * Generated at: 2025-07-02 05:47:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.notice;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sinse.boardapp.model.Notice;
import com.sinse.boardapp.repository.NoticeDAO;

public final class content_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

NoticeDAO noticeDAO = new NoticeDAO();
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.sinse.boardapp.model.Notice");
    _jspx_imports_classes.add("com.sinse.boardapp.repository.NoticeDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

//요청 객체로부터 파라미터 뽑아내기
//이 스크립틀릿 영역은 이 JSP가 서블릿으로 변경되어질때, servce() 메서드 영역이므로, 이미 service() 메서드
//의 매개변수와 응답 객체를 념겨받은상태
//service(HttpServletRequest requuest, HttpServletResponse response)
String notice_id = request.getParameter("notice_id");

// String sql = "SELECT * FROM notice WHERE notice_id =" + notice_id;
// out.print(sql);
Notice notice = noticeDAO.select(Integer.parseInt(notice_id));

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	font-family: Arial, Helvetica, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("* {\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=text], select, textarea {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	padding: 12px;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	border-radius: 4px;\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("	margin-top: 6px;\r\n");
      out.write("	margin-bottom: 16px;\r\n");
      out.write("	resize: vertical;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=button] {\r\n");
      out.write("	background-color: #04AA6D;\r\n");
      out.write("	color: white;\r\n");
      out.write("	padding: 12px 20px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 4px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=button]:hover {\r\n");
      out.write("	background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	background-color: #f2f2f2;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("<!-- include summernote css/js -->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.9.0/dist/summernote.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.9.0/dist/summernote.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("	//서머노트연동\r\n");
      out.write("	$(()=>{\r\n");
      out.write("		$(\"#content\").summernote({\r\n");
      out.write("			height:250,\r\n");
      out.write("\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$(\"#content\").summernote('code',\"");
      out.print(notice.getContent());
      out.write("\")\r\n");
      out.write("	//버튼에 이벤트 연결\r\n");
      out.write("		\r\n");
      out.write("		$(\"#bt_edit\").click(() =>{\r\n");
      out.write("			if(confirm(\"수정하시겠어요?\")){\r\n");
      out.write("				//서버로 입력폼의 내용을 모두 가져가야 하므로, Post 방식으로 보내야 함\r\n");
      out.write("				$(\"form\").attr({\r\n");
      out.write("					method:\"POST\", \r\n");
      out.write("					action:\"/notice/update\"\r\n");
      out.write("				});\r\n");
      out.write("				$(\"form\").submit();\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$(\"#bt_del\").click(() =>{\r\n");
      out.write("			if(confirm(\"삭제하시겠어요?\")){\r\n");
      out.write("				//GET 방식 요청(링크)\r\n");
      out.write("				location.href = \"/notice/del?notice_id=");
      out.print(notice_id);
      out.write("\";\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$(\"#bt_list\").click(() =>{\r\n");
      out.write("\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("});\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("</body>\r\n");
      out.write("<h3>Contact Form</h3>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	<form>\r\n");
      out.write("	<!-- hidden은 html 컴포넌트의 역할을 수행하지만, 시각적으로 표현되지는 않음 \r\n");
      out.write("	노출되지 않은상태로 데이터를 전송할때 사용\r\n");
      out.write("	-->\r\n");
      out.write("		<input type=\"hidden\" id=\"fname\" name=\"notice_id\" value=\"");
      out.print(notice.getNotice_id());
      out.write("\">\r\n");
      out.write("				 \r\n");
      out.write("		<label for=\"fname\">Title</label> \r\n");
      out.write("		<input type=\"text\" id=\"fname\" name=\"title\" value=\"");
      out.print(notice.getTitle());
      out.write("\">\r\n");
      out.write("		\r\n");
      out.write("		<label for=\"lname\">Writer</label> \r\n");
      out.write("		<input type=\"text\" id=\"lname\" name=\"writer\" value=\"");
      out.print(notice.getWriter());
      out.write("\"> \r\n");
      out.write("		\r\n");
      out.write("		<label for=\"subject\">Content</label>\r\n");
      out.write("		<textarea id=\"content\" name=\"content\" placehholder=\"내용 입력\" style=\"height: 200px\"></textarea>\r\n");
      out.write("\r\n");
      out.write("		<input type=\"button\" value=\"수정\" id=\"bt_edit\"> \r\n");
      out.write("		<input type=\"button\" value=\"삭제\" id=\"bt_del\"> 	\r\n");
      out.write("		<input type=\"button\" value=\"목록\" id=\"bt_list\">\r\n");
      out.write("	</form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
